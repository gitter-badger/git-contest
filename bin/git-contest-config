#!/usr/bin/env ruby

#
# git-contest-config
# https://github.com/sh19910711/git-contest
#
# Copyright (c) 2014 Hiroyuki Sano <sh19910711 at gmail.com>
# Licensed under the MIT-License.
#

$:.unshift File.expand_path('../../lib', __FILE__)
require 'git/contest/common'
require 'trollop'
require 'highline/import'
require 'active_support/core_ext/hash'


# Show Banner
def usage
  puts get_banner
  return 0
end

def show_get_usage
  res = ""
  res += "usage: git contest config get [key]\n"
  res += "\n"
  res += "Example Usage:\n"
  res += "  $ git contest config get key1\n"
  res += "  $ git contest config get namespace1.key1\n"
  res += "  $ git contest config get sites.some_judge.user\n"
  res += " \n"
  puts res
end

def show_set_usage
  res = ""
  res += "usage: git contest config set [key] <value>\n"
  res += "\n"
  res += "Example Usage:\n"
  res += "  $ git contest config set key1 value1\n"
  res += "    -> key1 = value1\n"
  res += "  $ git contest config set key1\n"
  res += "    -> set value from command-line\n"
  res += "  $ git contest config set namespace1.key1 value1\n"
  res += "  $ git contest config set sites.some_judge.user username\n"
  res += " \n"
  puts res
end

def show_site_usage
  res = ""
  res += "usage: git contest config site <site-name>\n"
  res += "\n"
  res += "Example Usage:\n"
  res += "  $ git contest config site\n"
  res += "  -> enter driver name\n"
  res += "  -> enter user name\n"
  res += "  -> enter password\n"
  res += " \n"
  puts res
end

# Get Banner Text
def get_banner
  res = ""
  res += "usage: git contest config [type]\n"
  res += "\n"
  res += "Available types are:\n"
  res += "  %-8s: set value\n" % "set"
  res += "  %-8s: get value\n" % "get"
  res += "  %-8s: set site info\n" % "site"
  res += " \n"
  return res
end

init

sub_commands = %w(sites)
$options = Trollop::options do
  version "git-contest #{Git::Contest::VERSION} (c) 2013-2014 Hiroyuki Sano"
  banner get_banner
  stop_on sub_commands
end

type = ARGV.shift.to_s.strip

case type

when "site"
  if ARGV.length == 1
    # read info
    site_name = ARGV.shift.to_s.strip
    config = get_config

    # init config
    config["sites"][site_name] = {}

    # input site info
    # TODO: to check not found
    config["sites"][site_name]["driver"] = ask("driver_name > ").to_s
    # TODO: to depend on above driver
    config["sites"][site_name]["user"] = ask("user id > ").to_s
    config["sites"][site_name]["password"] = ask("password [hidden] > ") do |q|
      q.echo = false
    end.to_s

    # set config
    File.open($GIT_CONTEST_CONFIG, 'w') {|f| f.write config.to_yaml }
  else
    show_site_usage
  end

when "get"
  if ARGV.length == 1
    # read key
    config = get_config
    cur = config
    keys = ARGV.shift.to_s.strip.split('.')
    while ! keys.empty?
      key = keys.shift
      if cur.has_key? key
        cur = cur[key]
      else
        abort "ERROR: Not Found"
      end
    end
    # output
    if cur.is_a? Hash
      puts "keys = #{cur.keys.join(', ')}"
    else
      puts cur
    end
  else
    show_get_usage
  end

when "set"
  if ARGV.length == 1
    # read values
    keys = ARGV.shift.to_s.strip.split('.')
    puts "input value"
    value = gets.strip

    # update yaml value
    config = get_config
    new_config = {}
    cur = new_config
    while ! keys.empty?
      key = keys.shift
      if keys.empty?
        cur[key] = value
      else
        cur[key] = {}
        cur = cur[key]
      end
    end
    config.deep_merge! new_config

    # save file
    File.open($GIT_CONTEST_CONFIG, 'w') {|f| f.write config.to_yaml }
  elsif ARGV.length == 2
    # read values from command args
    keys = ARGV.shift.to_s.strip.split('.')
    value = ARGV.shift.to_s.strip

    # update yaml value
    config = get_config
    new_config = {}
    cur = new_config
    while ! keys.empty?
      key = keys.shift
      if keys.empty?
        cur[key] = value
      else
        cur[key] = {}
        cur = cur[key]
      end
    end
    config.deep_merge! new_config

    # save file
    File.open($GIT_CONTEST_CONFIG, 'w') {|f| f.write config.to_yaml }
  else
    show_set_usage
  end

else
  usage
end

